{
  "hash": "1fdddb80b8eb01964a045fb36f7aba8c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Spotify\"\nauthor: \"Laya Davis\"\ndate: \"2024-3-07\"\ncategories: [news, code, analysis]\nimage: \"spotify.png\"\n---\n\nThis posts describes the basics of using counting, sorting, indexing, and filtering methods on DataFrames in Python using Pandas. This will be done by using a Spotify DataFrame:\n\n::: {#4a875d04 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\nspotify = pd.read_csv('https://bcdanl.github.io/data/spotify_all.csv')\n```\n:::\n\n\nAn good first step when evaluating or manipulating DataFrames is to use the .info() function to learn about its columns and their data types:\n\n::: {#00256ef2 .cell execution_count=2}\n``` {.python .cell-code}\nspotify.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 198005 entries, 0 to 198004\nData columns (total 7 columns):\n #   Column         Non-Null Count   Dtype \n---  ------         --------------   ----- \n 0   pid            198005 non-null  int64 \n 1   playlist_name  198005 non-null  object\n 2   pos            198005 non-null  int64 \n 3   artist_name    198005 non-null  object\n 4   track_name     198005 non-null  object\n 5   duration_ms    198005 non-null  int64 \n 6   album_name     198005 non-null  object\ndtypes: int64(3), object(4)\nmemory usage: 10.6+ MB\n```\n:::\n:::\n\n\nDataFrames are by default, given integer indexing which means each row of observations are assigned an integer beginning with 0. It can be heelpful to replace this integer indexing with information within the DataFrame instead. For example the code below converts the index to the information in the 'artist name' column. The inplace = True is used to alter the original DataFrame directly rather than Python making a copy to alter.\n\n::: {#86800d39 .cell execution_count=3}\n``` {.python .cell-code}\nspotify.set_index('artist_name', inplace = True)\n```\n:::\n\n\nWe can then use this new index to filter the DataFrame for select artists using the .loc() function. In this case we are filtering for Taylor Swift and Beyoncé.\n\n::: {#e59017a5 .cell execution_count=4}\n``` {.python .cell-code}\nspotify.loc[['Taylor Swift', 'Beyoncé']]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pid</th>\n      <th>playlist_name</th>\n      <th>pos</th>\n      <th>track_name</th>\n      <th>duration_ms</th>\n      <th>album_name</th>\n    </tr>\n    <tr>\n      <th>artist_name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Taylor Swift</th>\n      <td>29</td>\n      <td>groovy</td>\n      <td>33</td>\n      <td>Look What You Made Me Do</td>\n      <td>211859</td>\n      <td>Look What You Made Me Do</td>\n    </tr>\n    <tr>\n      <th>Taylor Swift</th>\n      <td>44</td>\n      <td>taylor swift</td>\n      <td>0</td>\n      <td>Safe &amp; Sound - from The Hunger Games Soundtrack</td>\n      <td>240066</td>\n      <td>The Hunger Games: Songs From District 12 And B...</td>\n    </tr>\n    <tr>\n      <th>Taylor Swift</th>\n      <td>44</td>\n      <td>taylor swift</td>\n      <td>2</td>\n      <td>Crazier</td>\n      <td>191946</td>\n      <td>Hannah Montana The Movie</td>\n    </tr>\n    <tr>\n      <th>Taylor Swift</th>\n      <td>64</td>\n      <td>Elizabeth</td>\n      <td>48</td>\n      <td>Safe &amp; Sound - from The Hunger Games Soundtrack</td>\n      <td>240066</td>\n      <td>The Hunger Games: Songs From District 12 And B...</td>\n    </tr>\n    <tr>\n      <th>Taylor Swift</th>\n      <td>64</td>\n      <td>Elizabeth</td>\n      <td>49</td>\n      <td>Eyes Open</td>\n      <td>244586</td>\n      <td>The Hunger Games: Songs From District 12 And B...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Beyoncé</th>\n      <td>999984</td>\n      <td>Lake</td>\n      <td>113</td>\n      <td>7/11</td>\n      <td>213506</td>\n      <td>BEYONCÉ [Platinum Edition]</td>\n    </tr>\n    <tr>\n      <th>Beyoncé</th>\n      <td>999985</td>\n      <td>Baby Making Music</td>\n      <td>4</td>\n      <td>Dance for You</td>\n      <td>377466</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>Beyoncé</th>\n      <td>999985</td>\n      <td>Baby Making Music</td>\n      <td>24</td>\n      <td>Rocket</td>\n      <td>391906</td>\n      <td>BEYONCÉ [Platinum Edition]</td>\n    </tr>\n    <tr>\n      <th>Beyoncé</th>\n      <td>999989</td>\n      <td>PARTAY</td>\n      <td>51</td>\n      <td>Single Ladies (Put a Ring on It)</td>\n      <td>192586</td>\n      <td>I AM...SASHA FIERCE - Platinum Edition</td>\n    </tr>\n    <tr>\n      <th>Beyoncé</th>\n      <td>999992</td>\n      <td>GB</td>\n      <td>106</td>\n      <td>Irreplaceable (Irreemplazable) - Spanish version</td>\n      <td>227666</td>\n      <td>B'Day Deluxe Edition</td>\n    </tr>\n  </tbody>\n</table>\n<p>837 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nSuppose you wanted to count the number of observations that were in this DataFrame of only Taylor Swift and Beyoncé. You could use the .count() function with the previous line of code. This will give you the number of non-missing values for each column.\n\n::: {#b91d7cbe .cell execution_count=5}\n``` {.python .cell-code}\nspotify.loc[['Taylor Swift', 'Beyoncé']].count()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\npid              837\nplaylist_name    837\npos              837\ntrack_name       837\nduration_ms      837\nalbum_name       837\ndtype: int64\n```\n:::\n:::\n\n\nPerhaphs instead of knowing the number of observations you instead wanted to sort this DataFrame by the 'track_name' variable. You could use the .sort_values() function. \n\n::: {#8093ab22 .cell execution_count=6}\n``` {.python .cell-code}\nspotify.loc[['Taylor Swift', 'Beyoncé']].sort_values('track_name')\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pid</th>\n      <th>playlist_name</th>\n      <th>pos</th>\n      <th>track_name</th>\n      <th>duration_ms</th>\n      <th>album_name</th>\n    </tr>\n    <tr>\n      <th>artist_name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Beyoncé</th>\n      <td>782</td>\n      <td>Main Playlist</td>\n      <td>180</td>\n      <td>***Flawless</td>\n      <td>250960</td>\n      <td>BEYONCÉ [Platinum Edition]</td>\n    </tr>\n    <tr>\n      <th>Beyoncé</th>\n      <td>786</td>\n      <td>Summer 2016</td>\n      <td>53</td>\n      <td>***Flawless</td>\n      <td>250960</td>\n      <td>BEYONCÉ [Platinum Edition]</td>\n    </tr>\n    <tr>\n      <th>Beyoncé</th>\n      <td>999947</td>\n      <td>club</td>\n      <td>23</td>\n      <td>***Flawless</td>\n      <td>250960</td>\n      <td>BEYONCÉ [Platinum Edition]</td>\n    </tr>\n    <tr>\n      <th>Beyoncé</th>\n      <td>750</td>\n      <td>Summer 2016</td>\n      <td>22</td>\n      <td>***Flawless</td>\n      <td>250960</td>\n      <td>BEYONCÉ [Platinum Edition]</td>\n    </tr>\n    <tr>\n      <th>Beyoncé</th>\n      <td>651</td>\n      <td>Slay</td>\n      <td>4</td>\n      <td>***Flawless</td>\n      <td>250960</td>\n      <td>BEYONCÉ [Platinum Edition]</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Taylor Swift</th>\n      <td>1341</td>\n      <td>in my feels</td>\n      <td>54</td>\n      <td>You Belong With Me</td>\n      <td>231133</td>\n      <td>Fearless</td>\n    </tr>\n    <tr>\n      <th>Taylor Swift</th>\n      <td>999022</td>\n      <td>Throwbacks</td>\n      <td>107</td>\n      <td>You Belong With Me</td>\n      <td>231133</td>\n      <td>Fearless</td>\n    </tr>\n    <tr>\n      <th>Taylor Swift</th>\n      <td>999784</td>\n      <td>Throwback</td>\n      <td>24</td>\n      <td>You Belong With Me</td>\n      <td>231133</td>\n      <td>Fearless</td>\n    </tr>\n    <tr>\n      <th>Taylor Swift</th>\n      <td>1909</td>\n      <td>vibin</td>\n      <td>153</td>\n      <td>You're Not Sorry</td>\n      <td>261786</td>\n      <td>Fearless</td>\n    </tr>\n    <tr>\n      <th>Taylor Swift</th>\n      <td>1828</td>\n      <td>My Favorites</td>\n      <td>192</td>\n      <td>You're Not Sorry</td>\n      <td>261786</td>\n      <td>Fearless</td>\n    </tr>\n  </tbody>\n</table>\n<p>837 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nSince we altered the original DataFrame indexing, it may be helpful to revert back to the default integer indexing using the .reset_index() function. Once again the inplace = True parameter is used to alter the DataFrame itself rather than a copy.\n\n::: {#7e8f8b33 .cell execution_count=7}\n``` {.python .cell-code}\nspotify.reset_index(inplace = True)\n```\n:::\n\n\n",
    "supporting": [
      "spotify post_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}